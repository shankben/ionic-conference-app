schema {
  query: Query
}

type Complexity {
  family_D_genus_D_name: String!
  family_D_genus_D_species_D_commonName: String!
  family_D_genus_D_species_D_name: String!
  family_D_name: String!
  number: Int!
  updatedAt: AWSDateTime!
}

type Location {
  center: Boolean
  lat: Float!
  lng: Float!
  name: String!
  updatedAt: AWSDateTime!
}

type Query {
  getComplexity(key: String): Complexity
  getLocation(key: String): Location
  getSession(key: String): Session
  getSpeaker(key: String): Speaker
  getTrack(key: String): Track
  listComplexities: [Complexity]
  listLocations: [Location]
  listSessions: [Session]
  listSpeakers: [Speaker]
  listTracks: [Track]
}

type Session {
  date: String!
  description: String
  groupId: String!
  id: String!
  location: String!
  name: String!
  speakerNames_D_0: String
  speakerNames_D_1: String
  timeEnd: String!
  timeStart: String!
  tracks_D_0: String!
  updatedAt: AWSDateTime!
}

type Speaker {
  about: String!
  email: String!
  id: String!
  instagram: String!
  location: String!
  name: String!
  phone: String!
  profilePic: String!
  title: String!
  twitter: String!
  updatedAt: AWSDateTime!
}

type Track {
  icon: String!
  name: String!
  updatedAt: AWSDateTime!
}
